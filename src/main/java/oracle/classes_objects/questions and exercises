Consider the following class:

public class IdentifyMyParts {
    public static int x = 7;
    public int y = 3;
}
What are the class variables? ANS : x

What are the instance variables? ANS : y

What is the output from the following code:

IdentifyMyParts a = new IdentifyMyParts();
IdentifyMyParts b = new IdentifyMyParts();
a.y = 5;
b.y = 6;
a.x = 1;
b.x = 2;
System.out.println("a.y = " + a.y); ANS : 5
System.out.println("b.y = " + b.y); ANS : 6
System.out.println("a.x = " + a.x); ANS : 2
System.out.println("b.x = " + b.x); ANS : 2
System.out.println("IdentifyMyParts.x = " + IdentifyMyParts.x); ANS : 2


What's wrong with the following program?

public class SomethingIsWrong {
    public static void main(String[] args) {
        Rectangle myRect;
        myRect.width = 40;
        myRect.height = 50;
        System.out.println("myRect's area is " + myRect.area());
    }
}  Ans: myRect was not instantiated + Initialised


The following code creates one array and one string object. How many references to those objects exist after the code executes? Is either object eligible for garbage collection?

...
String[] students = new String[10];
String studentName = "Peter Parker";
students[0] = studentName;
studentName = null;
...
How does a program destroy an object that it creates?

Exercises
Fix the program called SomethingIsWrong shown in Question 1.
public class SomethingIsWrong {
    public static void main(String[] args) {
        Rectangle myRect = new Rectangle();
        myRect.width = 40;
        myRect.height = 50;
        System.out.println("myRect's area is " + myRect.area());
    }
}

Given the following class, called NumberHolder, write some code that creates an instance of the class, initializes its two member variables, and then displays the value of each member variable.

public class NumberHolder {
    public int anInt;
    public float aFloat;
}