An interface consists of contstants, method signatures, default methods, static methods.
An interface cannot be instantiated.
An interface is either implemented by other classes or extended by other interfaces
An interface can extend from multiple interfaces.
Only static and default methods within an interface have a body.

An interface declaration consist of the following:
1/ a modifier(e.g., public, private)
2/ the keyword interface
3/ the interface name
4/ a list of other interfaces it might be extending from

Abstract Method - a method that does not contain an implementation. i.e., method signature only
abstract, default and static methods within an interface are implicitly public so the public modifier can be ommited

constants are implicitly public static final, so these modifiers can be omitted.

When adding new methods to the interface, declare them as default methods or create a new interface that extends the old interface

When extending from an interface that contains default methods:
1/ Skip redeclaring the method in the new interface so it inherits the default method.
2/ Redeclare the default method; this makes the method abstract.
3/ Redefine the default method; this overrides it.

Questions and Exercises: Interfaces
Questions
1. What methods would a class that implements the java.lang.CharSequence interface have to implement?
ANS: charAt(int index),length(), subSequence(int start, int end), toString() **Skip default methods cos only abstract methods need to be implemented

2. What is wrong with the following interface?
   public interface SomethingIsWrong {
       void aMethod(int aValue){
           System.out.println("Hi Mom");
       }
   }

   ANS: aMethod is missing the keyword default or static. it's declared as an abstract method, but then the method body doesn't make it abstract.

3. Fix the interface in question 2.
   public interface SomethingIsWrong {
          default void aMethod(int aValue){
              System.out.println("Hi Mom");
          }
      }
 4. Is the following interface valid?
    public interface Marker {
    }
    ANS: Yes